//
//  HomeInteractor.swift
//  AppWeather
//
//  Created by Johnson-Riche Louis on 26/01/2020.
//  Copyright (c) 2020 Johnson-Richie Louis. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomeBusinessLogic {
    func fetchContents(request: Home.FetchContents.Request)
}

protocol HomeDataStore {
	var cityId: Int? { get set }
}

class HomeInteractor: HomeDataStore {

	// MARK: - Enum

    // MARK: - Property

    var presenter: HomePresentationLogic?
    private let worker: HomeWorkerProtocol
	var cityId: Int?

    init(worker: HomeWorkerProtocol) {
        self.worker = worker
    }
}

// MARK: - HomeBusinessLogic

extension HomeInteractor: HomeBusinessLogic {

    func fetchContents(request: Home.FetchContents.Request) {
		guard let cityId = cityId else {
			let response = Home.FetchContentsError.Response(error: AppWeatherError.invalidCityId)
			presenter?.presentFetchedContentsError(response: response)
			return
		}
		worker.fetchInfos(cityId: cityId) { [weak self] result in
            switch result {
            case .success(let home):
                let response = Home.FetchContents.Response(cityName: home.city,
                                                           description: home.description,
                                                           currentTemperature: home.currentTemperature,
                                                           days: home.daysInfo)
                self?.presenter?.presentFetchedContents(response: response)
            case .failure(let error):
                let response = Home.FetchContentsError.Response(error: error)
                self?.presenter?.presentFetchedContentsError(response: response)
            }
        }
    }
}
